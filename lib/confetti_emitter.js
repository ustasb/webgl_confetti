// Generated by CoffeeScript 1.4.0
(function() {
  var BOUNCE, Confetto, GRAVITY;

  BOUNCE = 0.3;

  GRAVITY = -0.005;

  window.ConfettiEmitter = (function() {

    ConfettiEmitter.minY = -5;

    ConfettiEmitter.maxAliveConfetti = 1000;

    function ConfettiEmitter(x, y, z) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (z == null) {
        z = 0;
      }
      this.pos = [x, y, z];
      this.confetti = [];
    }

    ConfettiEmitter.prototype.update = function() {
      var i, _results;
      i = this.confetti.length;
      while (i <= ConfettiEmitter.maxAliveConfetti) {
        this.confetti.push((function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Confetto, this.pos, function(){}));
        ++i;
      }
      _results = [];
      while (--i) {
        this.confetti[i].update();
        if (this.confetti[i].pos[1] < ConfettiEmitter.minY) {
          _results.push(this.confetti.splice(i, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ConfettiEmitter.prototype.draw = function(animateOpacity) {
      var colorBuffer, colors, confetto, vertexBuffer, vertices;
      gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
      gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);
      vertices = [];
      colors = [];
      animateOpacity = (function() {
        var _i, _len, _ref, _results;
        _ref = this.confetti;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          confetto = _ref[_i];
          if (animateOpacity) {
            confetto.color[3] = performance.now() % 4000 / 3000;
          }
          vertices.push.apply(vertices, confetto.pos);
          _results.push(colors.push.apply(colors, confetto.color));
        }
        return _results;
      }).call(this);
      vertexBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);
      colorBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
      gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, 4, gl.FLOAT, false, 0, 0);
      return gl.drawArrays(gl.POINTS, 0, this.confetti.length);
    };

    return ConfettiEmitter;

  })();

  Confetto = (function() {

    function Confetto(x, y, z) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (z == null) {
        z = 0;
      }
      this.pos = [x, y, z];
      this.color = [Math.random(), Math.random(), Math.random(), 1];
      this.vx = Math.random() * 0.1 - 0.05;
      this.vy = Math.random() * 0.1 + 0.1;
      this.vz = Math.random() * 0.1 - 0.05;
    }

    Confetto.prototype.update = function() {
      this.pos[0] += this.vx;
      this.pos[1] += this.vy;
      this.pos[2] += this.vz;
      this.vy += GRAVITY;
      if (this.pos[1] < 0 && this.pos[0] > -2 && this.pos[0] < 2 && this.pos[2] > -2 && this.pos[2] < 2) {
        this.pos[1] = 0;
        return this.vy *= -BOUNCE;
      }
    };

    return Confetto;

  })();

}).call(this);
